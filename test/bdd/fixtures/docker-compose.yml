#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
version: '2'

services:
  kms.trustbloc.local: # load balancer in front of KMS instances
    container_name: kms.trustbloc.local
    image: nginx:latest
    ports:
      - 8076:8076
    volumes:
      - ./keys/tls:/etc/nginx/certs
      - ./nginx-config/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - kms-1.trustbloc.local
      - kms-2.trustbloc.local
    networks:
      - bdd_net

  kms-1.trustbloc.local:
    container_name: kms-1.trustbloc.local
    image: ${KMS_SERVER_IMAGE}:latest
    environment:
      - KMS_HOST=0.0.0.0:8074
      - KMS_METRICS_HOST=0.0.0.0:48831
      - KMS_BASE_URL=https://kms.trustbloc.local:8076
      - KMS_TLS_CACERTS=/etc/tls/ec-cacert.pem
      - KMS_TLS_SERVE_CERT=/etc/tls/ec-pubCert.pem
      - KMS_TLS_SERVE_KEY=/etc/tls/ec-key.pem
      - KMS_DATABASE_TYPE=mongodb
      - KMS_DATABASE_URL=mongodb://mongodb.example.com:27017
      - KMS_DATABASE_PREFIX=opskms_
      - KMS_CACHE_ENABLE=true
      - KMS_LOG_LEVEL=debug
      - KMS_SECRET_LOCK_TYPE=aws
      - KMS_SECRET_LOCK_AWS_KEY_URI=aws-kms://arn:aws:kms:ca-central-1:111122223333:key/bc436485-5092-42b8-92a3-0aa8b93536dc
      - KMS_SECRET_LOCK_AWS_ENDPOINT=http://aws-kms.trustbloc.local:8020
      - AWS_ACCESS_KEY_ID=mock
      - AWS_SECRET_ACCESS_KEY=mock
      - KMS_GNAP_SIGNING_KEY=/etc/gnap-priv-key.pem
      - KMS_AUTH_SERVER_URL=https://auth.trustbloc.local:8070
      - KMS_EXTERNAL_GATEWAY_URL=https://localhost:8076
    ports:
      - 8074:8074
      - 48831:48831
    volumes:
      - ./keys:/etc
    command: start
    depends_on:
      - mongodb.example.com
      - edv.trustbloc.local
    networks:
      - bdd_net

  kms-2.trustbloc.local:
    container_name: kms-2.trustbloc.local
    image: ${KMS_SERVER_IMAGE}:latest
    environment:
      - KMS_HOST=0.0.0.0:8074
      - KMS_METRICS_HOST=0.0.0.0:48832
      - KMS_BASE_URL=https://kms.trustbloc.local:8076
      - KMS_TLS_CACERTS=/etc/tls/ec-cacert.pem
      - KMS_TLS_SERVE_CERT=/etc/tls/ec-pubCert.pem
      - KMS_TLS_SERVE_KEY=/etc/tls/ec-key.pem
      - KMS_DATABASE_TYPE=mongodb
      - KMS_DATABASE_URL=mongodb://mongodb.example.com:27017
      - KMS_DATABASE_PREFIX=opskms_
      - KMS_CACHE_ENABLE=true
      - KMS_LOG_LEVEL=debug
      - KMS_SECRET_LOCK_TYPE=aws
      - KMS_SECRET_LOCK_AWS_KEY_URI=aws-kms://arn:aws:kms:ca-central-1:111122223333:key/bc436485-5092-42b8-92a3-0aa8b93536dc
      - KMS_SECRET_LOCK_AWS_ENDPOINT=http://aws-kms.trustbloc.local:8020
      - AWS_ACCESS_KEY_ID=mock
      - AWS_SECRET_ACCESS_KEY=mock
      - KMS_GNAP_SIGNING_KEY=/etc/gnap-priv-key.pem
      - KMS_AUTH_SERVER_URL=https://auth.trustbloc.local:8070
      - KMS_EXTERNAL_GATEWAY_URL=https://localhost:8076
    ports:
      - 8075:8075
      - 48832:48832
    volumes:
      - ./keys:/etc
    command: start
    depends_on:
      - mongodb.example.com
      - edv.trustbloc.local
    networks:
      - bdd_net

  aws-kms.trustbloc.local:
    container_name: aws-kms.trustbloc.local
    image: nsmithuk/local-kms:latest
    environment:
      - PORT=8020
      - KMS_SEED_PATH=/init/seed.yaml
      - KMS_REGION=ca-central-1
      - KMS_ACCOUNT_ID=111122223333
    ports:
      - 8020:8020
    entrypoint: "local-kms"
    volumes:
      - ./aws-config/init:/init/
    networks:
      - bdd_net

  authz-kms.trustbloc.local:
    container_name: authz-kms.trustbloc.local
    image: ${KMS_SERVER_IMAGE}:latest
    environment:
      - KMS_HOST=0.0.0.0:8077
      - KMS_BASE_URL=https://authz-kms.trustbloc.local:8077
      - KMS_TLS_CACERTS=/etc/tls/ec-cacert.pem
      - KMS_TLS_SERVE_CERT=/etc/tls/ec-pubCert.pem
      - KMS_TLS_SERVE_KEY=/etc/tls/ec-key.pem
      - KMS_DATABASE_TYPE=mongodb
      - KMS_DATABASE_URL=mongodb://mongodb.example.com:27017
      - KMS_DATABASE_PREFIX=authzkms_
      - KMS_AUTH_SERVER_URL=https://auth.trustbloc.local:8070
      - KMS_AUTH_SERVER_TOKEN=test_token
      - KMS_AUTH_DISABLE=true
      - KMS_GNAP_HTTPSIG_DISABLE=false
      - KMS_CACHE_ENABLE=true
      - KMS_LOG_LEVEL=debug
      - KMS_SECRET_LOCK_TYPE=local
      - KMS_SECRET_LOCK_KEY_PATH=/etc/tls/secret-lock.key
    ports:
      - 8077:8077
    volumes:
      - ./keys/tls:/etc/tls
    command: start
    depends_on:
      - mongodb.example.com
      - edv.trustbloc.local
    networks:
      - bdd_net

  orb-kms.trustbloc.local:
    container_name: orb-kms.trustbloc.local
    image: ${KMS_SERVER_IMAGE}:latest
    environment:
      - KMS_HOST=0.0.0.0:8078
      - KMS_METRICS_HOST=0.0.0.0:48833
      - KMS_BASE_URL=https://kms.trustbloc.local:8078
      - KMS_TLS_CACERTS=/etc/tls/ec-cacert.pem
      - KMS_TLS_SERVE_CERT=/etc/tls/ec-pubCert.pem
      - KMS_TLS_SERVE_KEY=/etc/tls/ec-key.pem
      - KMS_DATABASE_TYPE=mongodb
      - KMS_DATABASE_URL=mongodb://mongodb.example.com:27017
      - KMS_DATABASE_PREFIX=orbkms_
      - KMS_AUTH_DISABLE=true
      - KMS_GNAP_HTTPSIG_DISABLE=false
      - KMS_CACHE_ENABLE=true
      - KMS_LOG_LEVEL=debug
      - KMS_SECRET_LOCK_TYPE=aws
      - KMS_SECRET_LOCK_AWS_KEY_URI=aws-kms://arn:aws:kms:ca-central-1:111122223333:key/bc436485-5092-42b8-92a3-0aa8b93536dc
      - KMS_SECRET_LOCK_AWS_ENDPOINT=http://aws-kms.trustbloc.local:8020
      - AWS_ACCESS_KEY_ID=mock
      - AWS_SECRET_ACCESS_KEY=mock
    ports:
      - 8078:8078
      - 48833:48833
    volumes:
      - ./keys/tls:/etc/tls
    command: start
    depends_on:
      - mongodb.example.com
      - edv.trustbloc.local
    networks:
      - bdd_net

  oathkeeper-auth-keyserver.trustbloc.local:
    container_name: oathkeeper-auth-keyserver.trustbloc.local
    image: oryd/oathkeeper:v0.38.4-alpine
    ports:
      - 4455:4455
    command: /bin/sh -c "cp /etc/tls/ec-cacert.pem /usr/local/share/ca-certificates/;update-ca-certificates;oathkeeper serve proxy --config /oathkeeper/config.yaml"
    user: root
    entrypoint: ""
    environment:
      - LOG_LEVEL=debug
      - PORT=4455
      - ISSUER_URL=https://oathkeeper-proxy.trustbloc.local
      - SERVE_PROXY_TLS_KEY_PATH=/etc/tls/ec-key.pem
      - SERVE_PROXY_TLS_CERT_PATH=/etc/tls/ec-pubCert.pem
    volumes:
      - ./oathkeeper-config/auth-keyserver:/oathkeeper
      - ./keys/tls:/etc/tls
    networks:
      - bdd_net

  oathkeeper-ops-keyserver.trustbloc.local:
    container_name: oathkeeper-ops-keyserver.trustbloc.local
    image: oryd/oathkeeper:v0.38.4-alpine
    ports:
      - 4466:4466
    command: /bin/sh -c "cp /etc/tls/ec-cacert.pem /usr/local/share/ca-certificates/;update-ca-certificates;oathkeeper serve proxy --config /oathkeeper/config.yaml"
    user: root
    entrypoint: ""
    environment:
      - LOG_LEVEL=debug
      - PORT=4466
      - ISSUER_URL=https://oathkeeper-proxy.trustbloc.local
      - SERVE_PROXY_TLS_KEY_PATH=/etc/tls/ec-key.pem
      - SERVE_PROXY_TLS_CERT_PATH=/etc/tls/ec-pubCert.pem
    volumes:
      - ./oathkeeper-config/ops-keyserver:/oathkeeper
      - ./keys/tls:/etc/tls
    networks:
      - bdd_net

  edv.trustbloc.local:
    container_name: edv.trustbloc.local
    image: ${EDV_REST_IMAGE}:${EDV_REST_IMAGE_TAG}
    environment:
      - EDV_HOST_URL=0.0.0.0:8081
      - EDV_TLS_CERT_FILE=/etc/tls/ec-pubCert.pem
      - EDV_TLS_KEY_FILE=/etc/tls/ec-key.pem
      - EDV_DATABASE_TYPE=mongodb
      - EDV_DATABASE_URL=mongodb://mongodb.example.com:27017
      - EDV_DATABASE_PREFIX=edv_
      - EDV_LOCALKMS_SECRETS_DATABASE_TYPE=mongodb
      - EDV_LOCALKMS_SECRETS_DATABASE_URL=mongodb://mongodb.example.com:27017
      - EDV_LOCALKMS_SECRETS_DATABASE_PREFIX=edv_kms_
      - EDV_EXTENSIONS=ReturnFullDocumentsOnQuery,Batch
      - EDV_DATABASE_TIMEOUT=60
      - EDV_AUTH_ENABLE=true
      - EDV_LOG_LEVEL=debug
    ports:
      - 8081:8081
    volumes:
      - ./keys/tls:/etc/tls
    command: start
    depends_on:
      - mongodb.example.com
    networks:
      - bdd_net

  auth.trustbloc.local:
    container_name: auth.trustbloc.local
    image: ${AUTH_REST_IMAGE}:${AUTH_REST_IMAGE_TAG}
    environment:
      - AUTH_REST_HOST_URL=0.0.0.0:8070
      - AUTH_REST_EXTERNAL_URL=https://auth.trustbloc.local:8070
      - AUTH_REST_TLS_CACERTS=/etc/keys/tls/ec-cacert.pem
      - AUTH_REST_TLS_SYSTEMCERTPOOL=true
      - AUTH_REST_TLS_SERVE_CERT=/etc/keys/tls/ec-pubCert.pem
      - AUTH_REST_TLS_SERVE_KEY=/etc/keys/tls/ec-key.pem
      - AUTH_REST_DATABASE_TYPE=mongodb
      - AUTH_REST_DATABASE_URL=mongodb://mongodb.example.com:27017
      - AUTH_REST_DATABASE_PREFIX=authrest_
      - AUTH_REST_OIDC_CALLBACK=https://auth.trustbloc.local:8070/oauth2/callback
      - AUTH_REST_OIDC_PROVIDERS_CONFIG=/etc/oidc-config/providers.yaml
      - AUTH_REST_SDS_DOCS_URL=https://TODO.docs.sds.org
      - AUTH_REST_SDS_OPSKEYS_URL=https://TODO.keys.sds.org
      - AUTH_REST_KEYSERVER_AUTH_URL=https://TODO.auth.keyserver.org
      - AUTH_REST_KEYSERVER_OPS_URL=https://TODO.ops.keyserver.org
      - AUTH_REST_HYDRA_URL=https://hydra.trustbloc.local:4445
      - AUTH_REST_API_TOKEN=test_token
      - AUTH_REST_COOKIE_AUTH_KEY=/etc/keys/session_cookies/auth.key
      - AUTH_REST_COOKIE_ENC_KEY=/etc/keys/session_cookies/enc.key
      - AUTH_REST_LOG_LEVEL=DEBUG
      - AUTH_REST_STATIC_IMAGES=/etc/static/images
      - GNAP_ACCESS_POLICY=/etc/gnap-config/access_policy.json
    ports:
      - 8070:8070
    entrypoint: ""
    command:  /bin/sh -c "sleep 30 && auth-rest start"
    volumes:
      - ./keys:/etc/keys
      - ./oidc-config:/etc/oidc-config
      - ./static:/etc/static
      - ./gnap-config:/etc/gnap-config
    depends_on:
      - hydra.trustbloc.local
      - mongodb.example.com
      - oidc.provider.example.com
    networks:
      - bdd_net

  testnet.orb.local:
    container_name: testnet.orb.local
    image: ${SIDETREE_MOCK_IMAGE}:${SIDETREE_MOCK_IMAGE_TAG}
    environment:
      - SIDETREE_MOCK_TLS_CERTIFICATE=/etc/sidetree/tls/ec-pubCert.pem
      - SIDETREE_MOCK_TLS_KEY=/etc/sidetree/tls/ec-key.pem
      - SIDETREE_MOCK_HOST=0.0.0.0
      - SIDETREE_MOCK_PORT=443
      - SIDETREE_MOCK_DID_NAMESPACE=did:orb
      - SIDETREE_MOCK_DID_ALIASES=did:orb:testnet.orb.local
      - SIDETREE_MOCK_EXTERNAL_ENDPOINT=https://testnet.orb.local
      - SIDETREE_MOCK_WELLKNOWN_PATH=did-orb
    ports:
      - "443:443"
    volumes:
      - ./keys/tls:/etc/sidetree/tls
    networks:
      - bdd_net

  hydra.trustbloc.local:
    container_name: hydra.trustbloc.local
    image: oryd/hydra:${HYDRA_IMAGE_TAG}
    ports:
      - 4444:4444
      - 4445:4445
    command:  /bin/sh -c "hydra migrate sql --read-from-env --yes; hydra serve all"
    entrypoint: ""
    environment:
      - DSN=mysql://hydra:hydra-secret-pw@tcp(mysql:3306)/hydra?max_conns=20&max_idle_conns=4
      - URLS_SELF_ISSUER=https://localhost:4444/
      - URLS_CONSENT=https://auth.trustbloc.local:8070/hydra/consent
      - URLS_LOGIN=https://auth.trustbloc.local:8070/hydra/login
      - SECRETS_SYSTEM=testSecretsSystem
      - OIDC_SUBJECT_TYPES_SUPPORTED=public
      - OIDC_SUBJECT_TYPE_PAIRWISE_SALT=testSecretsSystem
      - SERVE_TLS_KEY_PATH=/etc/tls/ec-key.pem
      - SERVE_TLS_CERT_PATH=/etc/tls/ec-pubCert.pem
    restart: unless-stopped
    volumes:
      - ./keys/tls:/etc/tls
    depends_on:
      - mysql
    networks:
      - bdd_net

  oidc.provider.example.com:
    container_name: oidc.provider.example.com
    image: oryd/hydra:${HYDRA_IMAGE_TAG}
    ports:
      - 5555:5555
      - 5556:5556
    command: /bin/sh -c "hydra migrate sql --read-from-env --yes; tmp/hydra_configure.sh& hydra serve all"
    entrypoint: ""
    environment:
      - DSN=mysql://thirdpartyoidc:thirdpartyoidc-secret-pw@tcp(mysql:3306)/thirdpartyoidc?max_conns=20&max_idle_conns=4
      - URLS_SELF_ISSUER=https://oidc.provider.example.com:5555/
      - URLS_CONSENT=https://localhost:8099/mock/consent
      - URLS_LOGIN=https://localhost:8099/mock/login
      - SECRETS_SYSTEM=testSecretsSystem
      - OIDC_SUBJECT_TYPES_SUPPORTED=public
      - OIDC_SUBJECT_TYPE_PAIRWISE_SALT=testSecretsSystem
      - SERVE_TLS_KEY_PATH=/etc/tls/ec-key.pem
      - SERVE_TLS_CERT_PATH=/etc/tls/ec-pubCert.pem
      - SERVE_PUBLIC_PORT=5555
      - SERVE_ADMIN_PORT=5556
    restart: unless-stopped
    volumes:
      - ./keys/tls:/etc/tls
      - ./hydra-config/hydra_configure.sh:/tmp/hydra_configure.sh
    depends_on:
      - mysql
      - mock.login.consent.example.com
    networks:
      - bdd_net

  mock.login.consent.example.com:
    container_name: mock.login.consent.example.com
    image: ${MOCK_LOGIN_CONSENT_IMAGE}:latest
    environment:
      - LISTEN_ADDR=:8099
      - HYDRA_ADMIN_URL=https://oidc.provider.example.com:5556
      - TLS_CERT_PATH=/etc/tls/ec-pubCert.pem
      - TLS_KEY_PATH=/etc/tls/ec-key.pem
      - ROOT_CA_CERTS_PATH=/etc/tls/ec-cacert.pem
    ports:
      - 8099:8099
    volumes:
      - ./keys/tls:/etc/tls
    networks:
      - bdd_net

  kms-server.openapi.com:
    container_name: kms-server.openapi.com
    image: swaggerapi/swagger-ui
    environment:
      - SWAGGER_JSON=/specs/openAPI.yml
      - BASE_URL=/openapi
    ports:
      - 8089:8080
    volumes:
      - ./specs:/specs
    depends_on:
      - kms.trustbloc.local
    networks:
      - bdd_net

  metrics.example.com:
    container_name: metrics.example.com
    image: prom/prometheus
    ports:
      - 9095:9090
    volumes:
      - ./prometheus-config/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - bdd_net

  mongodb.example.com:
    container_name: mongodb.example.com
    image: ${MONGODB_IMAGE}:${MONGODB_IMAGE_TAG}
    ports:
      - ${MONGODB_PORT}:${MONGODB_PORT}
    networks:
      - bdd_net

  mysql:
    container_name: mysql
    image: mysql:${MYSQL_IMAGE_TAG}
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: secret
    logging:
      driver: "none"
    volumes:
      - ./mysql-config:/docker-entrypoint-initdb.d
    networks:
      - bdd_net

networks:
  bdd_net:
    driver: bridge
